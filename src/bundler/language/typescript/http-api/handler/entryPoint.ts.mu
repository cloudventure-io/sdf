/**
 * ATTENTION: This file was generated by @cloudventure/sdf package
 * and it will be regenerated when the stack is synthesized.
 */

import * as httpApiRuntime from "@cloudventure/sdf/http-api/runtime";
import { BundledDocument } from "@cloudventure/sdf/http-api/openapi/types";

import { {{ OperationModel }} as Operation } from "./{{ InterfacesImport }}";
import * as validators from "./{{ ValidatorsImport }}";
import { handler } from "./{{ HandlerImport }}";
import document from "./{{ DocumentImport }}"

export type OperationRequest = Operation["request"];
export type OperationResponses = httpApiRuntime.ExtractResponses<Operation["response"]>;
export type Event = httpApiRuntime.EventType<Operation>;
export type Handler = httpApiRuntime.LambdaHandler<Operation>;

const operation = httpApiRuntime.getOperationSchema(document as BundledDocument, {{ PathPatternString }}, {{ MethodString }});

{{#RequestInterceptor}}
import { requestInterceptor } from "./{{ RequestInterceptor }}";
{{/RequestInterceptor}}
{{#ResponseInterceptor}}
import { responseInterceptor } from "./{{ ResponseInterceptor }}";
{{/ResponseInterceptor}}

export const {{ EntryPointFunctionName }} = httpApiRuntime.wrapper<Operation>({
    handler,
    validators,
    operation,
    {{#RequestInterceptor}}
    requestInterceptor,
    {{/RequestInterceptor}}
    {{#ResponseInterceptor}}
    responseInterceptor,
    {{/ResponseInterceptor}}
});
